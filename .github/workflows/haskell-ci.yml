name: Haskell CI

on:
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - '**'
    paths:
      - '.env'
      - 'src/**'
      - 'test/**'
      - 'Dockerfile'
      - 'haskell.cabal'
      - 'cabal.project.freeze'
      - '.github/workflows/haskell.yml'

jobs:
  build-and-test:
    name: 🚀 Build and Test Haskell
    runs-on: ubuntu-22.04
    env:
      GHC_VERSION: '9.10.1'
      CABAL_VERSION: '3.14.1.1'
      GHCR_REPO: ghcr.io/lmrco/haskell
      GOOGLE_REPO: docker
      GOOGLE_REGISTRY: europe-west6-docker.pkg.dev
      GOOGLE_PROJECT_ID: nimble-repeater-462408-j7
      TEST_REPORT_DIR: test-reports
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: ♻️ Export Runtime Environment variables
        run: |
          GHCR_REPO=ghcr.io/lmrco/haskell
          echo "GHCR_REPO=$GHCR_REPO" >> $GITHUB_ENV
          GOOGLE_REPO=docker
          echo "GOOGLE_REPO=$GOOGLE_REPO" >> $GITHUB_ENV
          GOOGLE_REGISTRY=europe-west6-docker.pkg.dev
          echo "GOOGLE_REGISTRY=$GOOGLE_REGISTRY" >> $GITHUB_ENV
          GOOGLE_PROJECT_ID=nimble-repeater-462408-j7
          echo "GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          BUILD_IMAGE_TAG=$(sha256sum haskell.cabal | cut -c1-64)
          echo "BUILD_IMAGE_TAG=$BUILD_IMAGE_TAG" >> $GITHUB_ENV
          PROJECT_VERSION=$(cat VERSION)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          BASE_VERSION=0.0.1.3
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed -E 's#^(chore|feature|bugfix|hotfix|release)/##' | tr '[:upper:]' '[:lower:]' | sed 's|/|-|g' | cut -c 1-63)
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          GHCUP_INSTALL_BASE_PREFIX=$HOME
          echo "GHCUP_INSTALL_BASE_PREFIX=$GHCUP_INSTALL_BASE_PREFIX" >> $GITHUB_ENV

      - name: 🔧 Set Up Haskell Tooling
        uses: haskell-actions/setup@v2
        with:
          ghc-version: '9.10.1'
          cabal-version: '3.14.1.1'

      - name: 🌟 Set up Haskell environment
        run: |
          ghc --version
          cabal --version
          echo "✅ Cabal setup complete. GHC ${GHC_VERSION} and Cabal ${CABAL_VERSION} should be active."

      - name: ⚙️ Update operating system and install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            autoconf \
            automake \
            build-essential \
            ca-certificates \
            chrony \
            curl \
            dpkg-dev \
            g++ \
            gcc \
            git \
            gnupg \
            hlint \
            jq \
            libc6-dev \
            libffi-dev \
            libgmp-dev \
            libicu-dev \
            liblzma-dev \
            libncursesw5 \
            libnuma-dev \
            libpq-dev \
            libreadline-dev \
            libssl-dev \
            libsystemd-dev \
            libtinfo-dev \
            libtool \
            llvm \
            make \
            netbase \
            pkg-config \
            procps \
            tmux \
            wget \
            xz-utils \
            zlib1g-dev

      - name: 🌟 Set up Haskell environment
        run: |
          ghc --version
          cabal --version
          echo "✅ Cabal setup complete. GHC ${GHC_VERSION} and Cabal ${CABAL_VERSION} should be active."

      - name: 📦 Install Libsodium
        run: |
          git clone https://github.com/input-output-hk/libsodium
          cd libsodium
          git checkout dbb48cc
          ./autogen.sh
          ./configure
          make
          sudo make install
          sudo ldconfig

      - name: 📦 Install Secp256k1
        run: |
          git clone https://github.com/bitcoin-core/secp256k1
          cd secp256k1
          git checkout ac83be33d0956faf6b7f61a60ab524ef7d6a473a
          ./autogen.sh
          ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
          make
          sudo make install
          sudo ldconfig

      - name: 📦 Install Blst
        run: |
          : ${BLST_VERSION:='v0.3.11'}
          git clone --depth 1 --branch ${BLST_VERSION} https://github.com/supranational/blst
          cd blst
          ./build.sh
          cat > libblst.pc << EOF
          prefix=/usr/local
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include
          
          Name: libblst
          Description: Multilingual BLS12-381 signature library
          URL: https://github.com/supranational/blst
          Version: ${BLST_VERSION#v}
          Cflags: -I\${includedir}
          Libs: -L\${libdir} -lblst
          EOF
          sudo cp libblst.pc /usr/local/lib/pkgconfig/
          sudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/
          sudo cp libblst.a /usr/local/lib
          sudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}

      - name: 🔄 Update Dependencies (Cabal)
        run: cabal update

      - name: 🛠 Build Dependencies (Cabal)
        run: cabal build --only-dependencies --enable-tests --enable-benchmarks

      - name: 🏗️ Build All Targets (Cabal)
        run: |
          mkdir -pv ./bin
          cabal build all
          cp $(cabal list-bin exe:haskell-server) ./bin/haskell-server

      - name: 📦 Save Server Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: haskell-server
          path: ./bin/haskell-server

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

#      - name: 🐳 Pull Development Docker Image
#        run: docker pull ${GHCR_REPO}-base:${BASE_VERSION} || true

#      - name: 🛠 Build Haskell Server in Development Image
#        continue-on-error: true
#        run: |
#          docker run --rm \
#            ${GHCR_REPO}-base:${BASE_VERSION} \
#            cabal build all

      - name: 🧪 Run Unit Tests and Generate Report
        run: |
          export TASTY_ANT_XML=${TEST_REPORT_DIR}/hspec-results.xml
          cabal test haskell:haskell-unit-tests --test-show-details=direct --test-option=--xml-output

      - name: 📤 Upload Unit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.TEST_REPORT_DIR }}/hspec-results.xml

      - name: 🧾 Publish test results to GitHub UI
        uses: mikepenz/action-junit-report@v4
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          report_paths: ${{ env.TEST_REPORT_DIR }}/hspec-results.xml
          include_passed: true

      - name: 📋 Post test results as PR comment
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          name: Unit Tests Reports
          path: ${{ env.TEST_REPORT_DIR }}/hspec-results.xml
          reporter: java-junit
          fail-on-error: false

      - name: 🔐 Log in to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GOOGLE_REGISTRY }}/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GOOGLE_REPO }}
          username: _json_key
          password: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY_JSON_KEY }}

      - name: 🐳 Build Server Image & Push
        run: |
          docker buildx build \
            --push \
            --target server \
            --platform linux/amd64 \
            --build-arg BINARY_PATH=./bin/haskell-server \
            -t "${GHCR_REPO}-server:${PROJECT_VERSION}-${BRANCH_NAME}" \
            -t "${GOOGLE_REGISTRY}/${GOOGLE_PROJECT_ID}/${GOOGLE_REPO}/haskell-server:${BRANCH_NAME}" \
            -f Dockerfile .

      - name: 🧪 Pull Server Docker Image
        run: docker pull "$GHCR_REPO-server:$PROJECT_VERSION-$BRANCH_NAME"

      - name: 🧪 Start Server Docker Image
        run: |
          # Start the container in detached mode
          docker run -d --rm --name haskell-server -p 8080:8080 "${GHCR_REPO}-server:${PROJECT_VERSION}-${BRANCH_NAME}"
          # Wait for the server to start
          echo "⏳ Waiting for server to be ready..."
          for i in {1..10}; do
            if curl -sSf http://localhost:8080/health > /dev/null; then
              break
            fi
            echo "Still waiting... (${i}s)"
            sleep 3
          done
          # Check logs if the server fails to start
          if ! curl -sSf http://localhost:8080/health > /dev/null; then
            echo "❌ Server failed to start. Checking logs..."
            docker logs haskell-server
            exit 1
          fi
          echo "✅ Server is running"

      - name: 🧪 Test Server Docker Image
        run: cabal test haskell:haskell-integration-tests

      - name: 🛑 Stop Server Docker Image
        run: docker stop haskell-server

      - name: 🔐 Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_ARTIFACT_REGISTRY_JSON_KEY }}

      - name: 🚢 Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          region: europe-west6
          service: ${{ env.BRANCH_NAME }}
          project_id: ${{ env.GOOGLE_PROJECT_ID }}
          image: ${{ env.GOOGLE_REGISTRY }}/${{ env.GOOGLE_PROJECT_ID }}/${{ env.GOOGLE_REPO }}/haskell-server:${{ env.BRANCH_NAME }}

      - name: 🔧 Install HLint
        run: cabal install hlint

      - name: 🔧 Install Fourmolu
        run: cabal install fourmolu

      - name: 🔍 Lint Haskell Code (HLint)
        run: hlint app/ src/ test/

      - name: 🎨 Check Code Formatting (Fourmolu)
        run: find app/ src/ test/ -name '*.hs' | xargs fourmolu --mode check

      - name: 🎨 Check Code Formatting (Fourmolu Github)
        uses: haskell-actions/run-fourmolu@v11
        with:
          version: "0.16.2.0"
          pattern: |
            src/**/*.hs
            app/**/*.hs
            test/**/*.hs

      - name: 🌐 Build Haddock Documentation
        run: cabal haddock --html --hyperlink-source --haddock-options="--use-unicode" --haddock-quickjump

      - name: 📂 Copy Generated Docs
        if: github.ref_name == 'main'
        run: |
          mkdir -p generated-docs
          DOCS_PATH=$(find dist-newstyle/build -type d -path "*/doc/html/*" -name haskell | head -n 1)
          if [ -z "$DOCS_PATH" ]; then
            echo "❌ Failed to locate generated docs"
            exit 1
          fi
          cp -r "$DOCS_PATH"/* generated-docs/

      - name: 🚀 Deploy Haddock Docs to GitHub Pages
        if: github.ref_name == 'main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GHCR_TOKEN }}
          publish_dir: ./generated-docs
          publish_branch: gh-pages
          destination_dir: ${{ github.ref_name }}